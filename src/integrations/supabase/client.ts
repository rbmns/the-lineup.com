
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://vbxhcqlcbusqwsqesoxw.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZieGhjcWxjYnVzcXdzcWVzb3h3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDUwMTM1NzcsImV4cCI6MjA2MDU4OTU3N30.hoUUYHcdBUgqbKpw-C_pct0bynPFGLnXvIpkneEwTZo";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true
  }
});

// Auth-related utility functions
const AUTH_ATTEMPT_KEY = 'auth_attempts';
const RATE_LIMIT_KEY = 'rate_limit_until';
const MAX_ATTEMPTS = 5;

// Complete logout function to ensure all auth state is cleared
export async function completeLogout() {
  try {
    await supabase.auth.signOut({ scope: 'global' });
    localStorage.removeItem(AUTH_ATTEMPT_KEY);
    localStorage.removeItem(RATE_LIMIT_KEY);
    return { success: true };
  } catch (error) {
    console.error('Error during complete logout:', error);
    return { success: false, error };
  }
}

// Track auth attempts for rate limiting
export function markAuthAttempt() {
  const attempts = Number(localStorage.getItem(AUTH_ATTEMPT_KEY) || '0');
  const newAttempts = attempts + 1;
  localStorage.setItem(AUTH_ATTEMPT_KEY, newAttempts.toString());
  
  // If we've reached max attempts, set a rate limit
  if (newAttempts >= MAX_ATTEMPTS) {
    const until = new Date().getTime() + (30 * 1000); // 30 seconds from now
    localStorage.setItem(RATE_LIMIT_KEY, until.toString());
  }
}

// Check if email is currently rate limited
export function checkEmailRateLimit() {
  const limitUntil = localStorage.getItem(RATE_LIMIT_KEY);
  if (!limitUntil) return false;
  
  const now = new Date().getTime();
  const until = Number(limitUntil);
  
  return now < until;
}

// Reset rate limit
export function resetRateLimit() {
  localStorage.removeItem(AUTH_ATTEMPT_KEY);
  localStorage.removeItem(RATE_LIMIT_KEY);
}

// Clear all rate limits
export function clearAllRateLimits() {
  resetRateLimit();
  // Clear any other rate limit related items if needed
}

// Storage bucket utilities
export async function ensureAvatarsBucketExists() {
  try {
    // Check if bucket already exists
    const { data: buckets, error: listError } = await supabase.storage.listBuckets();
    
    if (listError) {
      console.error('Error listing buckets:', listError);
      return false;
    }
    
    // Find if our bucket already exists
    const bucketExists = buckets?.some(bucket => bucket.name === 'avatars');
    
    if (!bucketExists) {
      // Create the bucket
      const { error } = await supabase.storage.createBucket('avatars', {
        public: true,
        fileSizeLimit: 10 * 1024 * 1024 // 10MB limit
      });
      
      if (error) {
        console.error('Error creating avatars bucket:', error);
        return false;
      }
      
      console.log('Created avatars bucket');
    } else {
      console.log('Avatars bucket already exists');
    }
    
    return true;
  } catch (error) {
    console.error('Error in ensureAvatarsBucketExists:', error);
    return false;
  }
}
