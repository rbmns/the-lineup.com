
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://vbxhcqlcbusqwsqesoxw.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZieGhjcWxjYnVzcXdzcWVzb3h3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDUwMTM1NzcsImV4cCI6MjA2MDU4OTU3N30.hoUUYHcdBUgqbKpw-C_pct0bynPFGLnXvIpkneEwTZo";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Rate limiting helpers
const RATE_LIMIT_KEY = 'auth_attempt_count';
const RATE_LIMIT_TIMEOUT_KEY = 'auth_timeout_until';
const MAX_ATTEMPTS = 5;
const TIMEOUT_MINUTES = 15;

// Check if user is currently rate limited
export const checkEmailRateLimit = (): boolean => {
  const attemptCount = parseInt(localStorage.getItem(RATE_LIMIT_KEY) || '0', 10);
  const timeoutUntil = localStorage.getItem(RATE_LIMIT_TIMEOUT_KEY);
  
  if (timeoutUntil) {
    const timeout = parseInt(timeoutUntil, 10);
    if (Date.now() < timeout) {
      return true;
    } else {
      // Timeout has expired, reset the counters
      localStorage.removeItem(RATE_LIMIT_TIMEOUT_KEY);
      localStorage.setItem(RATE_LIMIT_KEY, '0');
      return false;
    }
  }
  
  return attemptCount >= MAX_ATTEMPTS;
};

// Mark an authentication attempt
export const markAuthAttempt = (): void => {
  const currentCount = parseInt(localStorage.getItem(RATE_LIMIT_KEY) || '0', 10);
  const newCount = currentCount + 1;
  localStorage.setItem(RATE_LIMIT_KEY, newCount.toString());
  
  // If we've hit the limit, set the timeout
  if (newCount >= MAX_ATTEMPTS) {
    const timeout = Date.now() + (TIMEOUT_MINUTES * 60 * 1000);
    localStorage.setItem(RATE_LIMIT_TIMEOUT_KEY, timeout.toString());
  }
};

// Reset rate limiting
export const resetRateLimit = (): void => {
  localStorage.removeItem(RATE_LIMIT_KEY);
  localStorage.removeItem(RATE_LIMIT_TIMEOUT_KEY);
};

// Clear all rate limits
export const clearAllRateLimits = (): void => {
  resetRateLimit();
};

// Completely sign out
export const completeLogout = async (): Promise<void> => {
  try {
    await supabase.auth.signOut();
    console.log('Successfully signed out');
  } catch (error) {
    console.error('Error during sign out:', error);
  }
};

// Storage bucket helpers
export const ensureBucketExists = async (bucketName: string, isPublic = true): Promise<boolean> => {
  try {
    // Check if bucket already exists
    const { data: buckets, error: listError } = await supabase.storage.listBuckets();
    
    if (listError) {
      console.error('Error listing buckets:', listError);
      return false;
    }
    
    // Find if our bucket already exists
    const bucketExists = buckets?.some(bucket => bucket.name === bucketName);
    
    if (!bucketExists) {
      // Create the bucket
      const { error } = await supabase.storage.createBucket(bucketName, {
        public: isPublic,
        fileSizeLimit: 10 * 1024 * 1024 // 10MB limit
      });
      
      if (error) {
        console.error(`Error creating ${bucketName} bucket:`, error);
        return false;
      }
      
      console.log(`Created ${bucketName} bucket`);
    } else {
      console.log(`${bucketName} bucket already exists`);
    }
    
    return true;
  } catch (error) {
    console.error('Error in ensureBucketExists:', error);
    return false;
  }
};

// Ensure avatars bucket exists
export const ensureAvatarsBucketExists = async (): Promise<boolean> => {
  return ensureBucketExists('avatars', true);
};
