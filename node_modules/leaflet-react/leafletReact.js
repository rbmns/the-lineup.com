/** @jsx React.DOM */
var React = require('react');
var ReactDOM = require('react-dom');
var L = require('leaflet');

var DarkOverlay = React.createClass({
	render : function(){
		return (
			<div className="dark_overlay"><center><h1>Please input a city name to start2</h1></center></div>
		);
	}
});

var Tag = React.createClass({
	
	delete : function(){
		this.props.delete(this.props.id)
	},

	toggle : function(){
		this.props.toggle(this.props.id)
	},

	render : function(){

		var classStr = '';
		if(this.props.tag.selected == true) classStr = 'completed';
		
		return (
			<tr>
				<td><input onChange={this.toggle}  className="toggle" type="checkbox" checked={this.props.tag.selected} /></td>
				<td><label>{this.props.tag.label}</label></td>
				<td><label>{this.props.tag.location[0]}</label></td>
				<td><label>{this.props.tag.location[1]}</label></td>
				<td><button onClick={this.delete} className="destroy">remove</button></td>
			</tr>
		);
	}
});

var LeafletReact = React.createClass({
	
	leafletUpdate : function(){
		var map = this.state.map;
		var tags = this.state.tags;
		// add maker, circle and label below
		//map.removeLayer(marker)
		var markers = [];
		tags.map(function(tag,i){
			if(tag.selected == true){
				markers.push(L.marker(tag.location).addTo(map))
				var circle = L.circle(tag.location, 100, {
				    color: 'red',
				    fillColor: '#f03',
				    fillOpacity: 0.5
				}).addTo(map);
			}
		})
		// fit all locations in the view
		var group = new L.featureGroup(markers);
		if(tags.length > 0) map.fitBounds(group.getBounds());
	},

	componentDidUpdate : function(){
		//console.log("component updated")
		//console.log(this.state.tags)
		this.leafletUpdate();
	},

	componentDidMount: function() {
		//console.log("component mounted")
		//console.log(this.state.map)

		L.Icon.Default.imagePath = "./img";

		var accessToken = 'pk.eyJ1IjoiY2xlbWRlbHAiLCJhIjoiY2lodzU3NXJoMDJnOXQ1a2hvdXQ4eHcweSJ9.T7QkXi8T1sYvOoy4R8NKZg';
		
		var mapboxTiles = L.tileLayer('https://api.mapbox.com/v4/mapbox.streets/{z}/{x}/{y}.png?access_token=' + accessToken, {
		    attribution: '<a href="http://www.mapbox.com/about/maps/" target="_blank">Terms &amp; Feedback</a>'
		});

		this.state.map = L.map('map')
		    .addLayer(mapboxTiles)
		    .setView([51.508, -0.11], 12);
    	
    	this.leafletUpdate();	
  	},

	getInitialState : function(){
		//console.log("initialize component");
		var tags = [
				{location : [51.5, -0.09], label : "1", selected:true},
				{location : [52, -1], label : "2", selected:true},
				{location : [51.3, -0.09], label : "3", selected:true}
			];

		return {
			map : '',
			tags : this.props.tags || tags 
		}
	},

	deleteItem : function(key){
		this.state.tags.splice(key,1);
		this.setState({tags : this.state.tags})
	},
	
	toggleItem : function(key){
		console.log(this.state.tags[key])
		this.state.tags[key].selected = !this.state.tags[key].selected;
		this.setState({tags : this.state.tags})
	},

	render: function() {
		//console.log('render')
		var that = this;
		var dark_overlay = "";
		var rows = "";
		if(this.state.tags.length == 0){
			dark_overlay = <DarkOverlay />
		} 
		else{
			var rows = this.state.tags.map(function(tag,i){
				return <Tag toggle={that.toggleItem} delete={that.deleteItem} tag={tag} id={i} />
			});
		}

		return ( 
			<div>
				{dark_overlay}
				<div id="map"></div>
				<table className='textCentered'>
					<thead>
					    <tr>
							<th></th>
							<th>Address</th>
							<th>latitude</th>
							<th>longitude</th>
							<th></th>
						</tr>
					</thead>
					<tbody>
					    {rows}
					</tbody>
				</table>
			</div>
		);
	}
});

module.exports = LeafletReact;
